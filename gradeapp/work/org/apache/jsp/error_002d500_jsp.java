/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.12
 * Generated at: 2018-10-09 07:08:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import org.beangle.commons.lang.Strings;

public final class error_002d500_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintStream");
    _jspx_imports_classes.add("java.io.ByteArrayOutputStream");
    _jspx_imports_classes.add("org.beangle.commons.lang.Strings");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    java.lang.Throwable exception = org.apache.jasper.runtime.JspRuntimeLibrary.getThrowable(request);
    if (exception != null) {
      response.setStatus(javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

  boolean unwrapped = null == request.getHeader("x-requested-with")
					&& null == request.getParameter("x-requested-with");

      out.write('\n');

  if (unwrapped) {

      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\" dir=\"ltr\">\n");
      out.write("<head>\n");
      out.write("<title></title>\n");
      out.write("<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\" />\n");
      out.write("<meta http-equiv=\"pragma\" content=\"no-cache\" />\n");
      out.write("<meta http-equiv=\"cache-control\" content=\"no-cache\" />\n");
      out.write("<meta http-equiv=\"expires\" content=\"0\" />\n");
      out.write("<meta http-equiv=\"content-style-type\" content=\"text/css\" />\n");
      out.write("<meta http-equiv=\"content-script-type\" content=\"text/javascript\" />\n");
      out.write("<style>\n");
      out.write("html,body {\n");
      out.write("\theight: 100%;\n");
      out.write("\tpadding: 0;\n");
      out.write("\tmargin: 0;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t");

	  }
	
      out.write("\n");
      out.write("\t<style>\n");
      out.write(".container {\n");
      out.write("\theight: 150px;\n");
      out.write("\tmargin-top: 150px;\n");
      out.write("\toverflow: hidden;\n");
      out.write("\ttext-align: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".pertty-low {\n");
      out.write("\tfont-weight: bold;\n");
      out.write("\tcolor: blue;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".pertty-height {\n");
      out.write("\tfont-weight: bold;\n");
      out.write("\tcolor: red;\n");
      out.write("}\n");
      out.write("\n");
      out.write("div#exceptionStack {\n");
      out.write("\ttext-align: left;\n");
      out.write("\tdisplay: none;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("\t<div class=\"container\">\n");
      out.write("\t\t<img id=\"error_img\" style=\"width: 48px; height: 48px;\" alt=\"warn\" />\n");
      out.write("\t\t<span style=\"font-size: 40px; font-weight: bolder\"> 出错了</span> <br />\n");
      out.write("\t\t<span style=\"font-size: 30px;\">Error happened</span><br />\n");
      out.write("\t\t");

		  if (Boolean.TRUE.toString().equals(
							application.getInitParameter("devMode"))) {
		
      out.write("\n");
      out.write("\t\t<input type=\"button\" onclick=\"showStack()\" value=\"显示日志\" />&nbsp;\n");
      out.write("\t\t");

		  }
		
      out.write('\n');
      out.write('	');
      out.write('	');

		  if (unwrapped) {
		
      out.write("\n");
      out.write("\t\t<input type=\"button\" onclick=\"goHome()\" value=\"返回首页\" />\n");
      out.write("\t\t");

		  }
		
      out.write("\n");
      out.write("\t</div>\n");
      out.write("\t");

	  if (Boolean.TRUE.toString().equals(
						application.getInitParameter("devMode"))) {
	
      out.write("\n");
      out.write("\t<div id=\"exceptionStack\">\n");
      out.write("\t\t<h4>\n");
      out.write("\t\t\t错误原因:\n");
      out.write("\t\t\t");
      out.print(exception.getClass());
      out.write("</h4>\n");
      out.write("\t\t<pre>");
      out.print(exception.getMessage());
      out.write("</pre>\n");
      out.write("\t\t<h4>\n");
      out.write("\t\t\t错误路径:\n");
      out.write("\t\t\t");
      out.print(request
						.getAttribute("javax.servlet.forward.servlet_path"));
      out.write("</h4>\n");
      out.write("\t\t<p>With the following stack trace:</p>\n");
      out.write("\t\t");

		  ByteArrayOutputStream ostr = new ByteArrayOutputStream();
						exception.printStackTrace(new PrintStream(ostr));
						String stackMsg = ostr.toString();
						stackMsg = Strings
								.replace(stackMsg, "org.openurp",
										"<span class='pertty-height'>org.openurp</span>");
						stackMsg = Strings.replace(stackMsg, "org.beangle",
								"<span class='pertty-low'>org.beangle</span>");
						out.println(stackMsg);
		
      out.write("\n");
      out.write("\t</div>\n");
      out.write("\t");

	  }
	
      out.write("\n");
      out.write("\t<script>\n");
      out.write("\t\tvar basePath = '");
      out.print(request.getContextPath());
      out.write("';\n");
      out.write("\t\tdocument.getElementById(\"error_img\").src = basePath\n");
      out.write("\t\t\t\t+ \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${base}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/static/themes/default/icons/48x48/warning.png\";\n");
      out.write("\n");
      out.write("\t\tvar goHome = function() {\n");
      out.write("\t\t\twindow.location.href = basePath + \"/home.action\";\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tvar showStack = function() {\n");
      out.write("\t\t\tvar div = document.getElementById(\"exceptionStack\");\n");
      out.write("\t\t\tif (div) {\n");
      out.write("\t\t\t\tif (div.style.display == \"block\") {\n");
      out.write("\t\t\t\t\tdiv.style.display = \"none\";\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\tdiv.style.display = \"block\";\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t</script>\n");
      out.write("\t");

	  if (unwrapped) {
	
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");

  }

      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
